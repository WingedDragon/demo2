#zk url
#zk.connect=node61:2181,node62:2181,node63:2181
zk.connect=node61:2181,node62:2181,node63:2181/kafka

#broker list
#bootstrap.servers=node61:9092,node62:9093,node63:9094
bootstrap.servers=node61:9092,node62:9092,node63:9092

#ack��ʽ��(1)all��������е�commit�����ķ�ʽ ;(2) actks=1 leaderд�� (3) acks=n�ȴ�n������ȷ��
acks=-1
#sync acknow
#request.required.acks=-1
min.insync.replicas=2

#ʧ���Ƿ����ԣ����û��п��ܲ����ظ�����
retries=3

#����ÿ��partition��batch buffer��С
batch.size=16384

#��������send���ݻ�partitionFor�����õ���Ӧ��leaderʱ�����ĵȴ�ʱ�䣬Ĭ��ֵΪ60�롣
max.block.ms=60000

#��������socket��������ʱʱ�䣬Ĭ��ֵΪ30�롣
request.timeout.ms=30000

#partion-segment ��־�ָ��С
log.segment.bytes=1024*1024*1024
log.roll.hours=168

#compression type=none, gzip, snappy, lz4, producer
compression.type=snappy


#�ȶ�ã����bufferû����������Ϊ1������Ϣ���ͻ��1ms���ӳ٣����bufferû��
linger.ms=5

#����producer��������buffer���ڴ��С
buffer.memory=33554432

#��Ϣ���л� IntegerSerializer
key.serializer=org.apache.kafka.common.serialization.StringSerializer
value.serializer=com.bee.bigdata.kafka.serializable.kryo.DomainEncoding


#�Զ��ύ
enable.auto.commit=false
auto.commit.interval.ms=1000

#�Ựʱ��
timeout.ms=30000

#The socket timeout for network requests
#The socket timeout for network requests. The actual timeout set will be max.fetch.wait + socket.timeout.ms.
#socket.timeout.ms	30 * 1000

#socket.receive.buffer.bytes	64 * 1024	The socket receive buffer for network requests

#The number of bytes of messages to attempt to fetch for each topic-partition in each fetch request.
#These bytes will be read into memory for each partition, so this helps control the memory used by the consumer.

#The fetch request size must be at least as large as the maximum message size the server allows or else it is possible for the producer to send messages larger than the consumer can fetch.
#fetch.message.max.bytes	1024 * 1024

#num.consumer.fetchers	1	The number fetcher threads used to fetch data.
#auto.commit.enable	true	\

#Ĭ��������
#group.id=defgroup

##�Զ������
#partitioner.class=com.online.demo.util.kafka.KafkaPartitionKeyUtil



